####mkk(atm_machine_controller)
before_filter :authenticate_user!, except: [:index]

 def show
     session[:atm_no] = @atm_mach.id

  @user = User.find(current_user)
   @atm_machine=AtmMachine.find(params[:id])
   session[:my_atm_machine]= @atm_machine.id
   end
   
   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   transaction model rb
   default_scope -> { order(created_at: :desc) } 
   scope :recent, -> { order(created_at: :desc) }
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
app/models/atm_mach.rb
def sort
    scope :sort, -> { order(id: :asc) }
  end
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  atm_machine/app/controllers/accounts_controller.rb
  def create_deposit
    @account = Account.find(params[:id])
    if deposit_params[:amount].to_f <= 1000 && @account.deposit(deposit_params)
        @account.transactions.create!(ammount: deposit_params[:amount], atm_machine_id: session[:my_atm_machine], transaction_type: 1)
        flash[:notice]="Deposit Created"
        redirect_to atm_machine_path(session[:my_atm_machine])
    else
       flash[:alert]= @account.errors.full_messages.to_sentence
       render :new_deposit
    end
    def create_withdrawal 
    @account = Account.find(params[:id])
    if withdrawal_params[:amount].to_f <= @account.balance && withdrawal_params[:amount].to_f <= 500 && @account.withdrawal(withdrawal_params)
      @account.transactions.create!(ammount: withdrawal_params[:amount],atm_machine_id: session[:my_atm_machine], transaction_type: 2)
      flash[:notice]= "Withdrawal Created"
      redirect_to atm_machine_path(session[:my_atm_machine])
    else
      flash[:alert]= @account.errors.full_messages.to_sentence
      render :new_withdrawal
    end
    @@@@@@@@@@@@@@@@@@@@@@
   mkk
   def new_deposit
    @account = Account.find(params[:id])
  end
  def create_deposit
    
    @account = Account.find(params[:id])
    if deposit_params[:amount].to_f > 1000
      flash.alert = "Deposit more than a thousand in same day is not allowed "
      render :new_deposit
    else
      if @account.deposit(deposit_params)
        flash[:notice] = "Transaction completed Successfully"
        if deposit_params[:amount].to_f >= 700.0 && deposit_params[:amount].to_f <= 1000.0 
            Email.testemailformustafa(@account,deposit_params[:amount].to_f,session[:atm_no]).deliver
        end
        Transaction.create!(amount: deposit_params[:amount] , debit: true ,account_id: @account.id,atm_mach_id: session[:atm_no])
        redirect_to  atm_mach_path(session[:atm_no])
      else
        flash.alert = @account.errors.full_messages.to_sentence
        render :new_deposit
      end
    end
  end
  # ==========================================================================    
  def new_withdrawal
    @account = Account.find(params[:id])
  end
  def create_withdrawal
    @account = Account.find(params[:id])
    if  withdrawal_params[:amount].to_f> 500
      flash.alert = "Withdrawal more than a $500 in same day not allowed "
      render :new_withdrawal
    else
      if @account.withdrawal(withdrawal_params)
        flash[:notice] = "Transaction completed Successfully"
        if deposit_params[:amount].to_f >= 300.0 && deposit_params[:amount].to_f <= 500.0 
            Email.testemailformustafa(@account,deposit_params[:amount].to_f*-1,session[:atm_no]).deliver
        end
        Transaction.create!(amount: deposit_params[:amount] , debit: false ,account_id: @account.id,atm_mach_id: session[:atm_no])
        redirect_to atm_mach_path(session[:atm_no])
      else
        flash.alert = @account.errors.full_messages.to_sentence
        render :new_withdrawal
      end
    end
  end
  #=====================================================================
  ATM_new/app/models/us
  er_info.rb(mkk)
  validates :first_name,:last_name,:email,:city,:state,:street,:zip_code, :presence => true      
  validates_format_of :phone,:with => /\(?[0-9]{3}\)?-[0-9]{3}-[0-9]{4}/,:message => "- Phone numbers must be in xxx-xxx-xxxx format."
  validates :first_name, uniqueness: { scope: [:last_name,:email] , message: "or last name should be unique" },case_sensitive: false
  after_create :create_account

  private
    def create_account
      Account.create(user_id: user_id , balance: 0.0) #and we can add the parameters that we need to put by defult to the new created account
    end

end
###########

 #@@@@@@@@@@@@@@
  def create
    @account = Account.new(account_params)
    @atm_no = params[:my_atm] 
    respond_to do |format|
      if @account.save
        format.html { redirect_to atm_mach_path(session[:my_atm])}
        format.json { render :show, status: :created, location: @account }
      else
        format.html { render :new }
        format.json { render json: @account.errors, status: :unprocessable_entity }
      end
    end
  end
  #@@@@@@@@@@@@@@@@@@@@@@@@@@@
  
  
  *****8mkk transaction
   #=====================================================================
   def transaction_list
    @account = Account.find(params[:id])
    @transactions = @account.transactions
  #======================================================================
   scope :today, -> { where('DATE(created_at) = ?', Date.today)}
   #====================================================================
    else
                if ((Transaction.where("account_id =? and created_at>=? and debit=?",id,t,true).sum(:amount).to_f)+a[:amount].to_f) > 1000
                  
                  return false

   #====================================================
     else
    if ((Transaction.where("account_id =? and created_at>=? and debit=?",id,t,false).sum(:amount).to_f)+a[:amount].to_f) > 500
      return false
#===========================================================================
 <%=link_to 'All Transactions',  transaction_list_account_path (current_user.account ),class:"btn btn-info btn-lg"%></br></br>


(def time in transaction) t = (Time.now-6.hours).beginning_of_day # to define the period from the beginning of the day (12 AM) in the local time not GMT